@model IEnumerable<SchoolManageSys.Models.StudentAttendanceModel>

<main class="main" id="main">
    <div class="container mt-5">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <input type="date" id="attendanceDateFilter" class="form-control w-auto" />
            <h2 class="text-center mb-0">Student Attendance List</h2>
            <a asp-action="Add" asp-controller="StudentAttendance" class="btn btn-success">
                <i class="bi bi-plus-circle"></i> Add Student Attendance
            </a>
        </div>

        <h6 class="text-success">@TempData["SuccessMessage"]</h6>
        <h6 class="text-danger">@TempData["ErrorMessage"]</h6>

        <table class="table table-striped table-bordered table-hover" id="attendanceTable">
            <thead class="table-dark">
            <tr>
                <th>Attendance Id</th>
                <th>Student Name</th>
                <th>Student Email</th>
                <th>Subject Name</th>
                <th>Teacher Name</th>
                <th>Attendance Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var studentAttendance in Model)
            {
                <tr>
                    <td>@studentAttendance.AttendanceId</td>
                    <td>@studentAttendance.StudentName</td>
                    <td>
                        <a href="#" class="send-email" data-name="@studentAttendance.StudentName" data-email="@studentAttendance.Email">
                            @studentAttendance.Email
                        </a>
                    </td>
                    <td>@studentAttendance.SubjectName</td>
                    <td>@studentAttendance.TeacherName</td>
                    <td>@studentAttendance.AttendanceDate</td>
                    <td>@studentAttendance.Status</td>
                    <td>
                        <div class="d-flex justify-content-center">
                            <a asp-action="Add" asp-controller="StudentAttendance" asp-route-AttendanceId="@studentAttendance.AttendanceId" class="btn btn-sm btn-primary me-2">
                                <i class="bi bi-pencil-square"></i> Edit
                            </a>
                            <form asp-action="Delete" asp-controller="StudentAttendance" asp-route-AttendnaceId="@studentAttendance.AttendanceId" method="post">
                                <button type="button" class="btn btn-sm btn-danger delete-button">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </form>
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</main>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const deleteButtons = document.querySelectorAll(".delete-button");
        const dateFilter = document.getElementById("attendanceDateFilter");

        // Delete confirmation popup
        deleteButtons.forEach(button => {
            button.addEventListener("click", function (e) {
                e.preventDefault();
                const form = this.closest("form");
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        form.submit();
                    }
                });
            });
        });

        // Set today's date and fetch data
        const today = new Date().toISOString().split('T')[0];
        dateFilter.value = today;
        fetchFilteredData(today);

        // Date filter event listener
        dateFilter.addEventListener("change", function () {
            fetchFilteredData(dateFilter.value);
        });

        function fetchFilteredData(date) {
            fetch(`/StudentAttendance/GET?attendanceDate=${date}`, {
                method: 'GET',
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    const tableBody = document.querySelector("#attendanceTable tbody");
                    tableBody.innerHTML = "";

                    if (data.length === 0) {
                        tableBody.innerHTML = `<tr><td colspan="8" class="text-center text-danger">No attendance records found for this date. Attendance is pending.</td></tr>`;
                    } else {
                        data.forEach(studentAttendance => {
                            const row = document.createElement("tr");
                            row.innerHTML = `
                            <td>${studentAttendance.attendanceId}</td>
                            <td>${studentAttendance.studentName}</td>
                            <td>
                                <a href="#" class="send-email" data-name="${studentAttendance.studentName}" data-email="${studentAttendance.email}">
                                    ${studentAttendance.email}
                                </a>
                            </td>
                            <td>${studentAttendance.subjectName}</td>
                            <td>${studentAttendance.teacherName}</td>
                            <td>${new Date(studentAttendance.attendanceDate).toISOString().split('T')[0]}</td>
                            <td>${studentAttendance.status}</td>
                            <td>
                                <div class="d-flex justify-content-center">
                                    <a href="/StudentAttendance/Add/${studentAttendance.attendanceId}" class="btn btn-sm btn-primary me-2">
                                        <i class="bi bi-pencil-square"></i> Edit
                                    </a>
                                    <form method="post" action="/StudentAttendance/Delete/${studentAttendance.attendanceId}">
                                        <button type="button" class="btn btn-sm btn-danger delete-button">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </form>
                                </div>
                            </td>
                        `;
                            tableBody.appendChild(row);
                        });
                    }
                })
                .catch(error => console.error('Error fetching filtered data:', error));
        }

        // Email click event handling
        document.body.addEventListener("click", function (event) {
            const target = event.target.closest(".send-email");
            if (!target) return;
            event.preventDefault();

            const studentName = target.getAttribute("data-name");
            const studentEmail = target.getAttribute("data-email");

            Swal.fire({
                title: "Send Email?",
                text: `Do you want to send an email to ${studentName}?`,
                icon: "question",
                showCancelButton: true,
                confirmButtonText: "Send",
                cancelButtonText: "Cancel"
            }).then((result) => {
                if (result.isConfirmed) {
                    sendEmail(studentName, studentEmail);
                }
            });
        });

        function sendEmail(name, email) {
            fetch("/send", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ StudentName: name, Email: email })
            })
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                    return response.text(); // Use text() instead of json() to check response manually
                })
                .then(data => {
                    try {
                        const jsonData = JSON.parse(data); // Convert to JSON safely
                        if (jsonData.message) {
                            Swal.fire("Success", "Email sent successfully!", "success");
                        } else {
                            Swal.fire("Error", "Failed to send email.", "error");
                        }
                    } catch (e) {
                        Swal.fire("Error", "Invalid server response.", "error");
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    Swal.fire("Error", `Something went wrong: ${error.message}`, "error");
                });

        }
    });
</script>
